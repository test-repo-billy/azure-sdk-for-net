// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Reservations
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for QuotaRequestsOperations.
    /// </summary>
    public static partial class QuotaRequestsOperationsExtensions
    {
            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location. To use, first make a Get request to get quota information. This
            /// information consists of a list of resources and information regarding those
            /// resources. For all the resources in that list which require an update to
            /// their quotas, update their limit fields in the response from the Get
            /// request to their new values. Then, submit this updated JSON object to this
            /// quota request API. This will update the quotas to the values specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// User's Azure region.
            /// </param>
            /// <param name='createQuotaRequests'>
            /// Quota requests payload.
            /// </param>
            public static object Create(this IQuotaRequestsOperations operations, string subscriptionId, string providerId, string location, QuotaLimits createQuotaRequests)
            {
                return operations.CreateAsync(subscriptionId, providerId, location, createQuotaRequests).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location. To use, first make a Get request to get quota information. This
            /// information consists of a list of resources and information regarding those
            /// resources. For all the resources in that list which require an update to
            /// their quotas, update their limit fields in the response from the Get
            /// request to their new values. Then, submit this updated JSON object to this
            /// quota request API. This will update the quotas to the values specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// User's Azure region.
            /// </param>
            /// <param name='createQuotaRequests'>
            /// Quota requests payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAsync(this IQuotaRequestsOperations operations, string subscriptionId, string providerId, string location, QuotaLimits createQuotaRequests, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(subscriptionId, providerId, location, createQuotaRequests, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location. To use, first make a Get request to get quota information. This
            /// information consists of a list of resources and information regarding those
            /// resources. For all the resources in that list which require an update to
            /// their quotas, update their limit fields in the response from the Get
            /// request to their new values. Then, submit this updated JSON object to this
            /// quota request API. This will update the quotas to the values specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// User's Azure region.
            /// </param>
            /// <param name='createQuotaRequests'>
            /// Quota requests payload.
            /// </param>
            public static object Update(this IQuotaRequestsOperations operations, string subscriptionId, string providerId, string location, QuotaLimits createQuotaRequests)
            {
                return operations.UpdateAsync(subscriptionId, providerId, location, createQuotaRequests).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location. To use, first make a Get request to get quota information. This
            /// information consists of a list of resources and information regarding those
            /// resources. For all the resources in that list which require an update to
            /// their quotas, update their limit fields in the response from the Get
            /// request to their new values. Then, submit this updated JSON object to this
            /// quota request API. This will update the quotas to the values specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// User's Azure region.
            /// </param>
            /// <param name='createQuotaRequests'>
            /// Quota requests payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAsync(this IQuotaRequestsOperations operations, string subscriptionId, string providerId, string location, QuotaLimits createQuotaRequests, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(subscriptionId, providerId, location, createQuotaRequests, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// For the specified location and resource Provider, gets the current quota
            /// requests under the subscription over the time
            /// period of one year ago from now to one year back.
            /// </summary>
            /// <remarks>
            /// For the specified location and Resource provider gets the current quota
            /// requests under the subscription over the time period of one year ago from
            /// now to one year back. oData filter can be used to select quota requests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// User's Azure region.
            /// </param>
            /// <param name='filter'>
            /// | Field                    | Supported operators
            /// |---------------------|------------------------
            ///
            /// |requestSubmitTime | ge, le, eq, gt, lt
            /// </param>
            /// <param name='skip'>
            /// Number of records to skip.
            /// </param>
            /// <param name='top'>
            /// Number of records to return.
            /// </param>
            public static IPage<QuotaRequestDetails> ListStatus(this IQuotaRequestsOperations operations, string subscriptionId, string providerId, string location, string filter = default(string), int? skip = default(int?), int? top = default(int?))
            {
                return operations.ListStatusAsync(subscriptionId, providerId, location, filter, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// For the specified location and resource Provider, gets the current quota
            /// requests under the subscription over the time
            /// period of one year ago from now to one year back.
            /// </summary>
            /// <remarks>
            /// For the specified location and Resource provider gets the current quota
            /// requests under the subscription over the time period of one year ago from
            /// now to one year back. oData filter can be used to select quota requests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// User's Azure region.
            /// </param>
            /// <param name='filter'>
            /// | Field                    | Supported operators
            /// |---------------------|------------------------
            ///
            /// |requestSubmitTime | ge, le, eq, gt, lt
            /// </param>
            /// <param name='skip'>
            /// Number of records to skip.
            /// </param>
            /// <param name='top'>
            /// Number of records to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<QuotaRequestDetails>> ListStatusAsync(this IQuotaRequestsOperations operations, string subscriptionId, string providerId, string location, string filter = default(string), int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStatusWithHttpMessagesAsync(subscriptionId, providerId, location, filter, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location. To use, first make a Get request to get quota information. This
            /// information consists of a list of resources and information regarding those
            /// resources. For all the resources in that list which require an update to
            /// their quotas, update their limit fields in the response from the Get
            /// request to their new values. Then, submit this updated JSON object to this
            /// quota request API. This will update the quotas to the values specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// User's Azure region.
            /// </param>
            /// <param name='createQuotaRequests'>
            /// Quota requests payload.
            /// </param>
            public static object BeginCreate(this IQuotaRequestsOperations operations, string subscriptionId, string providerId, string location, QuotaLimits createQuotaRequests)
            {
                return operations.BeginCreateAsync(subscriptionId, providerId, location, createQuotaRequests).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location. To use, first make a Get request to get quota information. This
            /// information consists of a list of resources and information regarding those
            /// resources. For all the resources in that list which require an update to
            /// their quotas, update their limit fields in the response from the Get
            /// request to their new values. Then, submit this updated JSON object to this
            /// quota request API. This will update the quotas to the values specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// User's Azure region.
            /// </param>
            /// <param name='createQuotaRequests'>
            /// Quota requests payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BeginCreateAsync(this IQuotaRequestsOperations operations, string subscriptionId, string providerId, string location, QuotaLimits createQuotaRequests, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(subscriptionId, providerId, location, createQuotaRequests, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location. To use, first make a Get request to get quota information. This
            /// information consists of a list of resources and information regarding those
            /// resources. For all the resources in that list which require an update to
            /// their quotas, update their limit fields in the response from the Get
            /// request to their new values. Then, submit this updated JSON object to this
            /// quota request API. This will update the quotas to the values specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// User's Azure region.
            /// </param>
            /// <param name='createQuotaRequests'>
            /// Quota requests payload.
            /// </param>
            public static object BeginUpdate(this IQuotaRequestsOperations operations, string subscriptionId, string providerId, string location, QuotaLimits createQuotaRequests)
            {
                return operations.BeginUpdateAsync(subscriptionId, providerId, location, createQuotaRequests).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location. To use, first make a Get request to get quota information. This
            /// information consists of a list of resources and information regarding those
            /// resources. For all the resources in that list which require an update to
            /// their quotas, update their limit fields in the response from the Get
            /// request to their new values. Then, submit this updated JSON object to this
            /// quota request API. This will update the quotas to the values specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// User's Azure region.
            /// </param>
            /// <param name='createQuotaRequests'>
            /// Quota requests payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BeginUpdateAsync(this IQuotaRequestsOperations operations, string subscriptionId, string providerId, string location, QuotaLimits createQuotaRequests, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(subscriptionId, providerId, location, createQuotaRequests, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// For the specified location and resource Provider, gets the current quota
            /// requests under the subscription over the time
            /// period of one year ago from now to one year back.
            /// </summary>
            /// <remarks>
            /// For the specified location and Resource provider gets the current quota
            /// requests under the subscription over the time period of one year ago from
            /// now to one year back. oData filter can be used to select quota requests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<QuotaRequestDetails> ListStatusNext(this IQuotaRequestsOperations operations, string nextPageLink)
            {
                return operations.ListStatusNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// For the specified location and resource Provider, gets the current quota
            /// requests under the subscription over the time
            /// period of one year ago from now to one year back.
            /// </summary>
            /// <remarks>
            /// For the specified location and Resource provider gets the current quota
            /// requests under the subscription over the time period of one year ago from
            /// now to one year back. oData filter can be used to select quota requests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<QuotaRequestDetails>> ListStatusNextAsync(this IQuotaRequestsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStatusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
