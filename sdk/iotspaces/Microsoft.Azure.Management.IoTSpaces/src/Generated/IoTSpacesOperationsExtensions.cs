// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.IoTSpaces
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IoTSpacesOperations.
    /// </summary>
    public static partial class IoTSpacesOperationsExtensions
    {
            /// <summary>
            /// Get the metadata of a IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            public static IoTSpacesDescription Get(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName)
            {
                return operations.GetAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the metadata of a IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IoTSpacesDescription> GetAsync(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the metadata of an IoTSpaces instance. The usual pattern
            /// to modify a property is to retrieve the IoTSpaces instance metadata and
            /// security metadata, and then combine them with the modified values in a new
            /// body to update the IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            /// <param name='iotSpaceDescription'>
            /// The IoTSpaces instance metadata and security metadata.
            /// </param>
            public static IoTSpacesDescription CreateOrUpdate(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName, IoTSpacesDescription iotSpaceDescription)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, resourceName, iotSpaceDescription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update the metadata of an IoTSpaces instance. The usual pattern
            /// to modify a property is to retrieve the IoTSpaces instance metadata and
            /// security metadata, and then combine them with the modified values in a new
            /// body to update the IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            /// <param name='iotSpaceDescription'>
            /// The IoTSpaces instance metadata and security metadata.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IoTSpacesDescription> CreateOrUpdateAsync(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName, IoTSpacesDescription iotSpaceDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotSpaceDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the metadata of a IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            /// <param name='iotSpacePatchDescription'>
            /// The IoTSpaces instance metadata and security metadata.
            /// </param>
            public static IoTSpacesDescription Update(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName, IoTSpacesPatchDescription iotSpacePatchDescription)
            {
                return operations.UpdateAsync(resourceGroupName, resourceName, iotSpacePatchDescription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the metadata of a IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            /// <param name='iotSpacePatchDescription'>
            /// The IoTSpaces instance metadata and security metadata.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IoTSpacesDescription> UpdateAsync(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName, IoTSpacesPatchDescription iotSpacePatchDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotSpacePatchDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            public static IoTSpacesDescription Delete(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName)
            {
                return operations.DeleteAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IoTSpacesDescription> DeleteAsync(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoTSpaces instances in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<IoTSpacesDescription> List(this IIoTSpacesOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the IoTSpaces instances in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IoTSpacesDescription>> ListAsync(this IIoTSpacesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoTSpaces instances in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            public static IPage<IoTSpacesDescription> ListByResourceGroup(this IIoTSpacesOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the IoTSpaces instances in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IoTSpacesDescription>> ListByResourceGroupAsync(this IIoTSpacesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if an IoTSpaces instance name is available.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the IoTSpaces service instance to check.
            /// </param>
            public static IoTSpacesNameAvailabilityInfo CheckNameAvailability(this IIoTSpacesOperations operations, string name)
            {
                return operations.CheckNameAvailabilityAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if an IoTSpaces instance name is available.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the IoTSpaces service instance to check.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IoTSpacesNameAvailabilityInfo> CheckNameAvailabilityAsync(this IIoTSpacesOperations operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the metadata of an IoTSpaces instance. The usual pattern
            /// to modify a property is to retrieve the IoTSpaces instance metadata and
            /// security metadata, and then combine them with the modified values in a new
            /// body to update the IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            /// <param name='iotSpaceDescription'>
            /// The IoTSpaces instance metadata and security metadata.
            /// </param>
            public static IoTSpacesDescription BeginCreateOrUpdate(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName, IoTSpacesDescription iotSpaceDescription)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, resourceName, iotSpaceDescription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update the metadata of an IoTSpaces instance. The usual pattern
            /// to modify a property is to retrieve the IoTSpaces instance metadata and
            /// security metadata, and then combine them with the modified values in a new
            /// body to update the IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            /// <param name='iotSpaceDescription'>
            /// The IoTSpaces instance metadata and security metadata.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IoTSpacesDescription> BeginCreateOrUpdateAsync(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName, IoTSpacesDescription iotSpaceDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotSpaceDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the metadata of a IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            /// <param name='iotSpacePatchDescription'>
            /// The IoTSpaces instance metadata and security metadata.
            /// </param>
            public static IoTSpacesDescription BeginUpdate(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName, IoTSpacesPatchDescription iotSpacePatchDescription)
            {
                return operations.BeginUpdateAsync(resourceGroupName, resourceName, iotSpacePatchDescription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the metadata of a IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            /// <param name='iotSpacePatchDescription'>
            /// The IoTSpaces instance metadata and security metadata.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IoTSpacesDescription> BeginUpdateAsync(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName, IoTSpacesPatchDescription iotSpacePatchDescription, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, iotSpacePatchDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            public static IoTSpacesDescription BeginDelete(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an IoTSpaces instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the IoTSpaces instance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the IoTSpaces instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IoTSpacesDescription> BeginDeleteAsync(this IIoTSpacesOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoTSpaces instances in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IoTSpacesDescription> ListNext(this IIoTSpacesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the IoTSpaces instances in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IoTSpacesDescription>> ListNextAsync(this IIoTSpacesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoTSpaces instances in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IoTSpacesDescription> ListByResourceGroupNext(this IIoTSpacesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the IoTSpaces instances in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IoTSpacesDescription>> ListByResourceGroupNextAsync(this IIoTSpacesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
