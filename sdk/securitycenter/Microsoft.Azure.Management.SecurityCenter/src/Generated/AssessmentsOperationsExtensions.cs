// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AssessmentsOperations.
    /// </summary>
    public static partial class AssessmentsOperationsExtensions
    {
            /// <summary>
            /// Get security assessments on all your scanned resources inside a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            public static IPage<SecurityAssessment> List(this IAssessmentsOperations operations, string scope)
            {
                return operations.ListAsync(scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get security assessments on all your scanned resources inside a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the query, can be subscription
            /// (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
            /// (/providers/Microsoft.Management/managementGroups/mgName).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecurityAssessment>> ListAsync(this IAssessmentsOperations operations, string scope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a security assessment on your scanned resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='expand'>
            /// OData expand. Optional. Possible values include: 'links', 'metadata'
            /// </param>
            public static SecurityAssessment Get(this IAssessmentsOperations operations, string resourceId, string assessmentName, string expand = default(string))
            {
                return operations.GetAsync(resourceId, assessmentName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a security assessment on your scanned resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='expand'>
            /// OData expand. Optional. Possible values include: 'links', 'metadata'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityAssessment> GetAsync(this IAssessmentsOperations operations, string resourceId, string assessmentName, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceId, assessmentName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a security assessment on your resource. An assessment metadata that
            /// describes this assessment must be predefined with the same name before
            /// inserting the assessment result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='body'>
            /// Calculated assessment on a pre-defined assessment metadata
            /// </param>
            public static SecurityAssessment Create(this IAssessmentsOperations operations, string resourceId, string assessmentName, SecurityAssessment body)
            {
                return operations.CreateAsync(resourceId, assessmentName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a security assessment on your resource. An assessment metadata that
            /// describes this assessment must be predefined with the same name before
            /// inserting the assessment result
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='assessmentName'>
            /// The Assessment Key - Unique key for the assessment type
            /// </param>
            /// <param name='body'>
            /// Calculated assessment on a pre-defined assessment metadata
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityAssessment> CreateAsync(this IAssessmentsOperations operations, string resourceId, string assessmentName, SecurityAssessment body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceId, assessmentName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get security assessments on all your scanned resources inside a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SecurityAssessment> ListNext(this IAssessmentsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get security assessments on all your scanned resources inside a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecurityAssessment>> ListNextAsync(this IAssessmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
