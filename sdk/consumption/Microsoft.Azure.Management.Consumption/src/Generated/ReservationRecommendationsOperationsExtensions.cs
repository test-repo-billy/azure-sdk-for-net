// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Consumption
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ReservationRecommendationsOperations.
    /// </summary>
    public static partial class ReservationRecommendationsOperationsExtensions
    {
            /// <summary>
            /// List of recommendations for purchasing reserved instances.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/consumption/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with reservation recommendations operations. This
            /// includes '/subscriptions/{subscriptionId}/' for subscription scope,
            /// '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// BillingAccount scope, and
            /// '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for billingProfile scope
            /// </param>
            /// <param name='filter'>
            /// May be used to filter reservationRecommendations by properties/scope and
            /// properties/lookBackPeriod.
            /// </param>
            public static IPage<ReservationRecommendation> ListByScope(this IReservationRecommendationsOperations operations, string scope, string filter = default(string))
            {
                return operations.ListByScopeAsync(scope, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of recommendations for purchasing reserved instances.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/consumption/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with reservation recommendations operations. This
            /// includes '/subscriptions/{subscriptionId}/' for subscription scope,
            /// '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// BillingAccount scope, and
            /// '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for billingProfile scope
            /// </param>
            /// <param name='filter'>
            /// May be used to filter reservationRecommendations by properties/scope and
            /// properties/lookBackPeriod.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReservationRecommendation>> ListByScopeAsync(this IReservationRecommendationsOperations operations, string scope, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByScopeWithHttpMessagesAsync(scope, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of recommendations for purchasing reserved instances.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/consumption/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ReservationRecommendation> ListByScopeNext(this IReservationRecommendationsOperations operations, string nextPageLink)
            {
                return operations.ListByScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of recommendations for purchasing reserved instances.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/consumption/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReservationRecommendation>> ListByScopeNextAsync(this IReservationRecommendationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
